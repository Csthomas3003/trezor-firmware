// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by protoc 3.19.6
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-evolu.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:hw.trezor.messages.evolu.EvoluGetKeys)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EvoluGetKeys {
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.evolu.EvoluGetKeys.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EvoluGetKeys {
    fn default() -> &'a EvoluGetKeys {
        <EvoluGetKeys as ::protobuf::Message>::default_instance()
    }
}

impl EvoluGetKeys {
    pub fn new() -> EvoluGetKeys {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EvoluGetKeys>(
            "EvoluGetKeys",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EvoluGetKeys {
    const NAME: &'static str = "EvoluGetKeys";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EvoluGetKeys {
        EvoluGetKeys::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EvoluGetKeys {
        static instance: EvoluGetKeys = EvoluGetKeys {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EvoluGetKeys {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EvoluGetKeys").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EvoluGetKeys {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvoluGetKeys {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.evolu.EvoluKeys)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct EvoluKeys {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.evolu.EvoluKeys.owner_id)
    pub owner_id: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.evolu.EvoluKeys.write_key)
    pub write_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.evolu.EvoluKeys.encryption_key)
    pub encryption_key: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.evolu.EvoluKeys.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a EvoluKeys {
    fn default() -> &'a EvoluKeys {
        <EvoluKeys as ::protobuf::Message>::default_instance()
    }
}

impl EvoluKeys {
    pub fn new() -> EvoluKeys {
        ::std::default::Default::default()
    }

    // required bytes owner_id = 1;

    pub fn owner_id(&self) -> &[u8] {
        match self.owner_id.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_owner_id(&mut self) {
        self.owner_id = ::std::option::Option::None;
    }

    pub fn has_owner_id(&self) -> bool {
        self.owner_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_owner_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.owner_id = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_owner_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.owner_id.is_none() {
            self.owner_id = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.owner_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_owner_id(&mut self) -> ::std::vec::Vec<u8> {
        self.owner_id.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes write_key = 2;

    pub fn write_key(&self) -> &[u8] {
        match self.write_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_write_key(&mut self) {
        self.write_key = ::std::option::Option::None;
    }

    pub fn has_write_key(&self) -> bool {
        self.write_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_write_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.write_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_write_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.write_key.is_none() {
            self.write_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.write_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_write_key(&mut self) -> ::std::vec::Vec<u8> {
        self.write_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // required bytes encryption_key = 3;

    pub fn encryption_key(&self) -> &[u8] {
        match self.encryption_key.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_encryption_key(&mut self) {
        self.encryption_key = ::std::option::Option::None;
    }

    pub fn has_encryption_key(&self) -> bool {
        self.encryption_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_encryption_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.encryption_key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_encryption_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.encryption_key.is_none() {
            self.encryption_key = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.encryption_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_encryption_key(&mut self) -> ::std::vec::Vec<u8> {
        self.encryption_key.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "owner_id",
            |m: &EvoluKeys| { &m.owner_id },
            |m: &mut EvoluKeys| { &mut m.owner_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "write_key",
            |m: &EvoluKeys| { &m.write_key },
            |m: &mut EvoluKeys| { &mut m.write_key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "encryption_key",
            |m: &EvoluKeys| { &m.encryption_key },
            |m: &mut EvoluKeys| { &mut m.encryption_key },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<EvoluKeys>(
            "EvoluKeys",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for EvoluKeys {
    const NAME: &'static str = "EvoluKeys";

    fn is_initialized(&self) -> bool {
        if self.owner_id.is_none() {
            return false;
        }
        if self.write_key.is_none() {
            return false;
        }
        if self.encryption_key.is_none() {
            return false;
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.owner_id = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.write_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.encryption_key = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.owner_id.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.write_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.encryption_key.as_ref() {
            my_size += ::protobuf::rt::bytes_size(3, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.owner_id.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.write_key.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.encryption_key.as_ref() {
            os.write_bytes(3, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> EvoluKeys {
        EvoluKeys::new()
    }

    fn clear(&mut self) {
        self.owner_id = ::std::option::Option::None;
        self.write_key = ::std::option::Option::None;
        self.encryption_key = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static EvoluKeys {
        static instance: EvoluKeys = EvoluKeys {
            owner_id: ::std::option::Option::None,
            write_key: ::std::option::Option::None,
            encryption_key: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for EvoluKeys {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("EvoluKeys").unwrap()).clone()
    }
}

impl ::std::fmt::Display for EvoluKeys {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EvoluKeys {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14messages-evolu.proto\x12\x18hw.trezor.messages.evolu\"\x0e\n\x0cEv\
    oluGetKeys\"j\n\tEvoluKeys\x12\x19\n\x08owner_id\x18\x01\x20\x02(\x0cR\
    \x07ownerId\x12\x1b\n\twrite_key\x18\x02\x20\x02(\x0cR\x08writeKey\x12%\
    \n\x0eencryption_key\x18\x03\x20\x02(\x0cR\rencryptionKeyB9\n#com.satosh\
    ilabs.trezor.lib.protobufB\x12TrezorMessageEvolu\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(EvoluGetKeys::generated_message_descriptor_data());
            messages.push(EvoluKeys::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

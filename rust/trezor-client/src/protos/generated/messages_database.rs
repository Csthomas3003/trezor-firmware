// This file is generated by rust-protobuf 3.3.0. Do not edit
// .proto file is parsed by protoc 3.19.6
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `messages-database.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_3_0;

// @@protoc_insertion_point(message:hw.trezor.messages.binance.DatabaseWipe)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DatabaseWipe {
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.binance.DatabaseWipe.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DatabaseWipe {
    fn default() -> &'a DatabaseWipe {
        <DatabaseWipe as ::protobuf::Message>::default_instance()
    }
}

impl DatabaseWipe {
    pub fn new() -> DatabaseWipe {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DatabaseWipe>(
            "DatabaseWipe",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DatabaseWipe {
    const NAME: &'static str = "DatabaseWipe";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DatabaseWipe {
        DatabaseWipe::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DatabaseWipe {
        static instance: DatabaseWipe = DatabaseWipe {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DatabaseWipe {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DatabaseWipe").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DatabaseWipe {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseWipe {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.binance.DatabaseWipeResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DatabaseWipeResponse {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseWipeResponse.identifier)
    pub identifier: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseWipeResponse.signature)
    pub signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.binance.DatabaseWipeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DatabaseWipeResponse {
    fn default() -> &'a DatabaseWipeResponse {
        <DatabaseWipeResponse as ::protobuf::Message>::default_instance()
    }
}

impl DatabaseWipeResponse {
    pub fn new() -> DatabaseWipeResponse {
        ::std::default::Default::default()
    }

    // optional bytes identifier = 1;

    pub fn identifier(&self) -> &[u8] {
        match self.identifier.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_identifier(&mut self) {
        self.identifier = ::std::option::Option::None;
    }

    pub fn has_identifier(&self) -> bool {
        self.identifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identifier(&mut self, v: ::std::vec::Vec<u8>) {
        self.identifier = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identifier(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.identifier.is_none() {
            self.identifier = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.identifier.as_mut().unwrap()
    }

    // Take field
    pub fn take_identifier(&mut self) -> ::std::vec::Vec<u8> {
        self.identifier.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes signature = 2;

    pub fn signature(&self) -> &[u8] {
        match self.signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_signature(&mut self) {
        self.signature = ::std::option::Option::None;
    }

    pub fn has_signature(&self) -> bool {
        self.signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.signature.is_none() {
            self.signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "identifier",
            |m: &DatabaseWipeResponse| { &m.identifier },
            |m: &mut DatabaseWipeResponse| { &mut m.identifier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "signature",
            |m: &DatabaseWipeResponse| { &m.signature },
            |m: &mut DatabaseWipeResponse| { &mut m.signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DatabaseWipeResponse>(
            "DatabaseWipeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DatabaseWipeResponse {
    const NAME: &'static str = "DatabaseWipeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.identifier = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.identifier.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.identifier.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DatabaseWipeResponse {
        DatabaseWipeResponse::new()
    }

    fn clear(&mut self) {
        self.identifier = ::std::option::Option::None;
        self.signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DatabaseWipeResponse {
        static instance: DatabaseWipeResponse = DatabaseWipeResponse {
            identifier: ::std::option::Option::None,
            signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DatabaseWipeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DatabaseWipeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DatabaseWipeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseWipeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.binance.DatabaseModifyKey)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DatabaseModifyKey {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseModifyKey.database_time)
    pub database_time: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseModifyKey.database_signature)
    pub database_signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseModifyKey.key)
    pub key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseModifyKey.value)
    pub value: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseModifyKey.proof)
    pub proof: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.binance.DatabaseModifyKey.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DatabaseModifyKey {
    fn default() -> &'a DatabaseModifyKey {
        <DatabaseModifyKey as ::protobuf::Message>::default_instance()
    }
}

impl DatabaseModifyKey {
    pub fn new() -> DatabaseModifyKey {
        ::std::default::Default::default()
    }

    // optional bytes database_time = 1;

    pub fn database_time(&self) -> &[u8] {
        match self.database_time.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_database_time(&mut self) {
        self.database_time = ::std::option::Option::None;
    }

    pub fn has_database_time(&self) -> bool {
        self.database_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_database_time(&mut self, v: ::std::vec::Vec<u8>) {
        self.database_time = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_time(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.database_time.is_none() {
            self.database_time = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.database_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_database_time(&mut self) -> ::std::vec::Vec<u8> {
        self.database_time.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes database_signature = 2;

    pub fn database_signature(&self) -> &[u8] {
        match self.database_signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_database_signature(&mut self) {
        self.database_signature = ::std::option::Option::None;
    }

    pub fn has_database_signature(&self) -> bool {
        self.database_signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_database_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.database_signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.database_signature.is_none() {
            self.database_signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.database_signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_database_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.database_signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string key = 3;

    pub fn key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 4;

    pub fn value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::string::String::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes proof = 5;

    pub fn proof(&self) -> &[u8] {
        match self.proof.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_proof(&mut self) {
        self.proof = ::std::option::Option::None;
    }

    pub fn has_proof(&self) -> bool {
        self.proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.proof.is_none() {
            self.proof = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "database_time",
            |m: &DatabaseModifyKey| { &m.database_time },
            |m: &mut DatabaseModifyKey| { &mut m.database_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "database_signature",
            |m: &DatabaseModifyKey| { &m.database_signature },
            |m: &mut DatabaseModifyKey| { &mut m.database_signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key",
            |m: &DatabaseModifyKey| { &m.key },
            |m: &mut DatabaseModifyKey| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &DatabaseModifyKey| { &m.value },
            |m: &mut DatabaseModifyKey| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "proof",
            |m: &DatabaseModifyKey| { &m.proof },
            |m: &mut DatabaseModifyKey| { &mut m.proof },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DatabaseModifyKey>(
            "DatabaseModifyKey",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DatabaseModifyKey {
    const NAME: &'static str = "DatabaseModifyKey";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.database_time = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.database_signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.key = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.value = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.proof = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.database_time.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.database_signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.database_time.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.database_signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.key.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.proof.as_ref() {
            os.write_bytes(5, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DatabaseModifyKey {
        DatabaseModifyKey::new()
    }

    fn clear(&mut self) {
        self.database_time = ::std::option::Option::None;
        self.database_signature = ::std::option::Option::None;
        self.key = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.proof = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DatabaseModifyKey {
        static instance: DatabaseModifyKey = DatabaseModifyKey {
            database_time: ::std::option::Option::None,
            database_signature: ::std::option::Option::None,
            key: ::std::option::Option::None,
            value: ::std::option::Option::None,
            proof: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DatabaseModifyKey {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DatabaseModifyKey").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DatabaseModifyKey {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseModifyKey {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.binance.DatabaseModifyKeyResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DatabaseModifyKeyResponse {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseModifyKeyResponse.database_signature)
    pub database_signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseModifyKeyResponse.update_signature)
    pub update_signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.binance.DatabaseModifyKeyResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DatabaseModifyKeyResponse {
    fn default() -> &'a DatabaseModifyKeyResponse {
        <DatabaseModifyKeyResponse as ::protobuf::Message>::default_instance()
    }
}

impl DatabaseModifyKeyResponse {
    pub fn new() -> DatabaseModifyKeyResponse {
        ::std::default::Default::default()
    }

    // optional bytes database_signature = 1;

    pub fn database_signature(&self) -> &[u8] {
        match self.database_signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_database_signature(&mut self) {
        self.database_signature = ::std::option::Option::None;
    }

    pub fn has_database_signature(&self) -> bool {
        self.database_signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_database_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.database_signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.database_signature.is_none() {
            self.database_signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.database_signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_database_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.database_signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes update_signature = 2;

    pub fn update_signature(&self) -> &[u8] {
        match self.update_signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_update_signature(&mut self) {
        self.update_signature = ::std::option::Option::None;
    }

    pub fn has_update_signature(&self) -> bool {
        self.update_signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.update_signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.update_signature.is_none() {
            self.update_signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.update_signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.update_signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "database_signature",
            |m: &DatabaseModifyKeyResponse| { &m.database_signature },
            |m: &mut DatabaseModifyKeyResponse| { &mut m.database_signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "update_signature",
            |m: &DatabaseModifyKeyResponse| { &m.update_signature },
            |m: &mut DatabaseModifyKeyResponse| { &mut m.update_signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DatabaseModifyKeyResponse>(
            "DatabaseModifyKeyResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DatabaseModifyKeyResponse {
    const NAME: &'static str = "DatabaseModifyKeyResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.database_signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.update_signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.database_signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.update_signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.database_signature.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.update_signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DatabaseModifyKeyResponse {
        DatabaseModifyKeyResponse::new()
    }

    fn clear(&mut self) {
        self.database_signature = ::std::option::Option::None;
        self.update_signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DatabaseModifyKeyResponse {
        static instance: DatabaseModifyKeyResponse = DatabaseModifyKeyResponse {
            database_signature: ::std::option::Option::None,
            update_signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DatabaseModifyKeyResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DatabaseModifyKeyResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DatabaseModifyKeyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseModifyKeyResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.binance.DatabaseProveMembership)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DatabaseProveMembership {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseProveMembership.database_time)
    pub database_time: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseProveMembership.database_signature)
    pub database_signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseProveMembership.key)
    pub key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseProveMembership.proof)
    pub proof: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.binance.DatabaseProveMembership.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DatabaseProveMembership {
    fn default() -> &'a DatabaseProveMembership {
        <DatabaseProveMembership as ::protobuf::Message>::default_instance()
    }
}

impl DatabaseProveMembership {
    pub fn new() -> DatabaseProveMembership {
        ::std::default::Default::default()
    }

    // optional bytes database_time = 1;

    pub fn database_time(&self) -> &[u8] {
        match self.database_time.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_database_time(&mut self) {
        self.database_time = ::std::option::Option::None;
    }

    pub fn has_database_time(&self) -> bool {
        self.database_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_database_time(&mut self, v: ::std::vec::Vec<u8>) {
        self.database_time = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_time(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.database_time.is_none() {
            self.database_time = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.database_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_database_time(&mut self) -> ::std::vec::Vec<u8> {
        self.database_time.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes database_signature = 2;

    pub fn database_signature(&self) -> &[u8] {
        match self.database_signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_database_signature(&mut self) {
        self.database_signature = ::std::option::Option::None;
    }

    pub fn has_database_signature(&self) -> bool {
        self.database_signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_database_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.database_signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.database_signature.is_none() {
            self.database_signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.database_signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_database_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.database_signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string key = 3;

    pub fn key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes proof = 4;

    pub fn proof(&self) -> &[u8] {
        match self.proof.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_proof(&mut self) {
        self.proof = ::std::option::Option::None;
    }

    pub fn has_proof(&self) -> bool {
        self.proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.proof.is_none() {
            self.proof = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "database_time",
            |m: &DatabaseProveMembership| { &m.database_time },
            |m: &mut DatabaseProveMembership| { &mut m.database_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "database_signature",
            |m: &DatabaseProveMembership| { &m.database_signature },
            |m: &mut DatabaseProveMembership| { &mut m.database_signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key",
            |m: &DatabaseProveMembership| { &m.key },
            |m: &mut DatabaseProveMembership| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "proof",
            |m: &DatabaseProveMembership| { &m.proof },
            |m: &mut DatabaseProveMembership| { &mut m.proof },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DatabaseProveMembership>(
            "DatabaseProveMembership",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DatabaseProveMembership {
    const NAME: &'static str = "DatabaseProveMembership";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.database_time = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.database_signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.key = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.proof = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.database_time.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.database_signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(4, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.database_time.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.database_signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.key.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.proof.as_ref() {
            os.write_bytes(4, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DatabaseProveMembership {
        DatabaseProveMembership::new()
    }

    fn clear(&mut self) {
        self.database_time = ::std::option::Option::None;
        self.database_signature = ::std::option::Option::None;
        self.key = ::std::option::Option::None;
        self.proof = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DatabaseProveMembership {
        static instance: DatabaseProveMembership = DatabaseProveMembership {
            database_time: ::std::option::Option::None,
            database_signature: ::std::option::Option::None,
            key: ::std::option::Option::None,
            proof: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DatabaseProveMembership {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DatabaseProveMembership").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DatabaseProveMembership {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseProveMembership {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.binance.DatabaseMerge)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DatabaseMerge {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseMerge.database_time)
    pub database_time: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseMerge.database_signature)
    pub database_signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseMerge.key)
    pub key: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseMerge.value)
    pub value: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseMerge.proof)
    pub proof: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseMerge.update_identifier)
    pub update_identifier: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseMerge.update_time)
    pub update_time: ::std::option::Option<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseMerge.update_signature)
    pub update_signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.binance.DatabaseMerge.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DatabaseMerge {
    fn default() -> &'a DatabaseMerge {
        <DatabaseMerge as ::protobuf::Message>::default_instance()
    }
}

impl DatabaseMerge {
    pub fn new() -> DatabaseMerge {
        ::std::default::Default::default()
    }

    // optional bytes database_time = 1;

    pub fn database_time(&self) -> &[u8] {
        match self.database_time.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_database_time(&mut self) {
        self.database_time = ::std::option::Option::None;
    }

    pub fn has_database_time(&self) -> bool {
        self.database_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_database_time(&mut self, v: ::std::vec::Vec<u8>) {
        self.database_time = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_time(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.database_time.is_none() {
            self.database_time = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.database_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_database_time(&mut self) -> ::std::vec::Vec<u8> {
        self.database_time.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes database_signature = 2;

    pub fn database_signature(&self) -> &[u8] {
        match self.database_signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_database_signature(&mut self) {
        self.database_signature = ::std::option::Option::None;
    }

    pub fn has_database_signature(&self) -> bool {
        self.database_signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_database_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.database_signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.database_signature.is_none() {
            self.database_signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.database_signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_database_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.database_signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional string key = 3;

    pub fn key(&self) -> &str {
        match self.key.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_key(&mut self) {
        self.key = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        self.key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if self.key.is_none() {
            self.key = ::std::option::Option::Some(::std::string::String::new());
        }
        self.key.as_mut().unwrap()
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        self.key.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string value = 4;

    pub fn value(&self) -> &str {
        match self.value.as_ref() {
            Some(v) => v,
            None => "",
        }
    }

    pub fn clear_value(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if self.value.is_none() {
            self.value = ::std::option::Option::Some(::std::string::String::new());
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        self.value.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes proof = 5;

    pub fn proof(&self) -> &[u8] {
        match self.proof.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_proof(&mut self) {
        self.proof = ::std::option::Option::None;
    }

    pub fn has_proof(&self) -> bool {
        self.proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.proof.is_none() {
            self.proof = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_proof(&mut self) -> ::std::vec::Vec<u8> {
        self.proof.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes update_identifier = 6;

    pub fn update_identifier(&self) -> &[u8] {
        match self.update_identifier.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_update_identifier(&mut self) {
        self.update_identifier = ::std::option::Option::None;
    }

    pub fn has_update_identifier(&self) -> bool {
        self.update_identifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_identifier(&mut self, v: ::std::vec::Vec<u8>) {
        self.update_identifier = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_identifier(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.update_identifier.is_none() {
            self.update_identifier = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.update_identifier.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_identifier(&mut self) -> ::std::vec::Vec<u8> {
        self.update_identifier.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes update_time = 7;

    pub fn update_time(&self) -> &[u8] {
        match self.update_time.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_update_time(&mut self) {
        self.update_time = ::std::option::Option::None;
    }

    pub fn has_update_time(&self) -> bool {
        self.update_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_time(&mut self, v: ::std::vec::Vec<u8>) {
        self.update_time = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_time(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.update_time.is_none() {
            self.update_time = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.update_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_time(&mut self) -> ::std::vec::Vec<u8> {
        self.update_time.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes update_signature = 8;

    pub fn update_signature(&self) -> &[u8] {
        match self.update_signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_update_signature(&mut self) {
        self.update_signature = ::std::option::Option::None;
    }

    pub fn has_update_signature(&self) -> bool {
        self.update_signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.update_signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.update_signature.is_none() {
            self.update_signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.update_signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.update_signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "database_time",
            |m: &DatabaseMerge| { &m.database_time },
            |m: &mut DatabaseMerge| { &mut m.database_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "database_signature",
            |m: &DatabaseMerge| { &m.database_signature },
            |m: &mut DatabaseMerge| { &mut m.database_signature },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "key",
            |m: &DatabaseMerge| { &m.key },
            |m: &mut DatabaseMerge| { &mut m.key },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "value",
            |m: &DatabaseMerge| { &m.value },
            |m: &mut DatabaseMerge| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "proof",
            |m: &DatabaseMerge| { &m.proof },
            |m: &mut DatabaseMerge| { &mut m.proof },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "update_identifier",
            |m: &DatabaseMerge| { &m.update_identifier },
            |m: &mut DatabaseMerge| { &mut m.update_identifier },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "update_time",
            |m: &DatabaseMerge| { &m.update_time },
            |m: &mut DatabaseMerge| { &mut m.update_time },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "update_signature",
            |m: &DatabaseMerge| { &m.update_signature },
            |m: &mut DatabaseMerge| { &mut m.update_signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DatabaseMerge>(
            "DatabaseMerge",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DatabaseMerge {
    const NAME: &'static str = "DatabaseMerge";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.database_time = ::std::option::Option::Some(is.read_bytes()?);
                },
                18 => {
                    self.database_signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                26 => {
                    self.key = ::std::option::Option::Some(is.read_string()?);
                },
                34 => {
                    self.value = ::std::option::Option::Some(is.read_string()?);
                },
                42 => {
                    self.proof = ::std::option::Option::Some(is.read_bytes()?);
                },
                50 => {
                    self.update_identifier = ::std::option::Option::Some(is.read_bytes()?);
                },
                58 => {
                    self.update_time = ::std::option::Option::Some(is.read_bytes()?);
                },
                66 => {
                    self.update_signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.database_time.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.database_signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(2, &v);
        }
        if let Some(v) = self.key.as_ref() {
            my_size += ::protobuf::rt::string_size(3, &v);
        }
        if let Some(v) = self.value.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(v) = self.proof.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        if let Some(v) = self.update_identifier.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(v) = self.update_time.as_ref() {
            my_size += ::protobuf::rt::bytes_size(7, &v);
        }
        if let Some(v) = self.update_signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(8, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.database_time.as_ref() {
            os.write_bytes(1, v)?;
        }
        if let Some(v) = self.database_signature.as_ref() {
            os.write_bytes(2, v)?;
        }
        if let Some(v) = self.key.as_ref() {
            os.write_string(3, v)?;
        }
        if let Some(v) = self.value.as_ref() {
            os.write_string(4, v)?;
        }
        if let Some(v) = self.proof.as_ref() {
            os.write_bytes(5, v)?;
        }
        if let Some(v) = self.update_identifier.as_ref() {
            os.write_bytes(6, v)?;
        }
        if let Some(v) = self.update_time.as_ref() {
            os.write_bytes(7, v)?;
        }
        if let Some(v) = self.update_signature.as_ref() {
            os.write_bytes(8, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DatabaseMerge {
        DatabaseMerge::new()
    }

    fn clear(&mut self) {
        self.database_time = ::std::option::Option::None;
        self.database_signature = ::std::option::Option::None;
        self.key = ::std::option::Option::None;
        self.value = ::std::option::Option::None;
        self.proof = ::std::option::Option::None;
        self.update_identifier = ::std::option::Option::None;
        self.update_time = ::std::option::Option::None;
        self.update_signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DatabaseMerge {
        static instance: DatabaseMerge = DatabaseMerge {
            database_time: ::std::option::Option::None,
            database_signature: ::std::option::Option::None,
            key: ::std::option::Option::None,
            value: ::std::option::Option::None,
            proof: ::std::option::Option::None,
            update_identifier: ::std::option::Option::None,
            update_time: ::std::option::Option::None,
            update_signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DatabaseMerge {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DatabaseMerge").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DatabaseMerge {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseMerge {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:hw.trezor.messages.binance.DatabaseMergeResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct DatabaseMergeResponse {
    // message fields
    // @@protoc_insertion_point(field:hw.trezor.messages.binance.DatabaseMergeResponse.database_signature)
    pub database_signature: ::std::option::Option<::std::vec::Vec<u8>>,
    // special fields
    // @@protoc_insertion_point(special_field:hw.trezor.messages.binance.DatabaseMergeResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DatabaseMergeResponse {
    fn default() -> &'a DatabaseMergeResponse {
        <DatabaseMergeResponse as ::protobuf::Message>::default_instance()
    }
}

impl DatabaseMergeResponse {
    pub fn new() -> DatabaseMergeResponse {
        ::std::default::Default::default()
    }

    // optional bytes database_signature = 1;

    pub fn database_signature(&self) -> &[u8] {
        match self.database_signature.as_ref() {
            Some(v) => v,
            None => &[],
        }
    }

    pub fn clear_database_signature(&mut self) {
        self.database_signature = ::std::option::Option::None;
    }

    pub fn has_database_signature(&self) -> bool {
        self.database_signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_database_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.database_signature = ::std::option::Option::Some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_database_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.database_signature.is_none() {
            self.database_signature = ::std::option::Option::Some(::std::vec::Vec::new());
        }
        self.database_signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_database_signature(&mut self) -> ::std::vec::Vec<u8> {
        self.database_signature.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "database_signature",
            |m: &DatabaseMergeResponse| { &m.database_signature },
            |m: &mut DatabaseMergeResponse| { &mut m.database_signature },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DatabaseMergeResponse>(
            "DatabaseMergeResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DatabaseMergeResponse {
    const NAME: &'static str = "DatabaseMergeResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.database_signature = ::std::option::Option::Some(is.read_bytes()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.database_signature.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.database_signature.as_ref() {
            os.write_bytes(1, v)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DatabaseMergeResponse {
        DatabaseMergeResponse::new()
    }

    fn clear(&mut self) {
        self.database_signature = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DatabaseMergeResponse {
        static instance: DatabaseMergeResponse = DatabaseMergeResponse {
            database_signature: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DatabaseMergeResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DatabaseMergeResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DatabaseMergeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DatabaseMergeResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17messages-database.proto\x12\x1ahw.trezor.messages.binance\"\x0e\n\
    \x0cDatabaseWipe\"T\n\x14DatabaseWipeResponse\x12\x1e\n\nidentifier\x18\
    \x01\x20\x01(\x0cR\nidentifier\x12\x1c\n\tsignature\x18\x02\x20\x01(\x0c\
    R\tsignature\"\xa5\x01\n\x11DatabaseModifyKey\x12#\n\rdatabase_time\x18\
    \x01\x20\x01(\x0cR\x0cdatabaseTime\x12-\n\x12database_signature\x18\x02\
    \x20\x01(\x0cR\x11databaseSignature\x12\x10\n\x03key\x18\x03\x20\x01(\tR\
    \x03key\x12\x14\n\x05value\x18\x04\x20\x01(\tR\x05value\x12\x14\n\x05pro\
    of\x18\x05\x20\x01(\x0cR\x05proof\"u\n\x19DatabaseModifyKeyResponse\x12-\
    \n\x12database_signature\x18\x01\x20\x01(\x0cR\x11databaseSignature\x12)\
    \n\x10update_signature\x18\x02\x20\x01(\x0cR\x0fupdateSignature\"\x95\
    \x01\n\x17DatabaseProveMembership\x12#\n\rdatabase_time\x18\x01\x20\x01(\
    \x0cR\x0cdatabaseTime\x12-\n\x12database_signature\x18\x02\x20\x01(\x0cR\
    \x11databaseSignature\x12\x10\n\x03key\x18\x03\x20\x01(\tR\x03key\x12\
    \x14\n\x05proof\x18\x04\x20\x01(\x0cR\x05proof\"\x9a\x02\n\rDatabaseMerg\
    e\x12#\n\rdatabase_time\x18\x01\x20\x01(\x0cR\x0cdatabaseTime\x12-\n\x12\
    database_signature\x18\x02\x20\x01(\x0cR\x11databaseSignature\x12\x10\n\
    \x03key\x18\x03\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x04\x20\x01(\t\
    R\x05value\x12\x14\n\x05proof\x18\x05\x20\x01(\x0cR\x05proof\x12+\n\x11u\
    pdate_identifier\x18\x06\x20\x01(\x0cR\x10updateIdentifier\x12\x1f\n\x0b\
    update_time\x18\x07\x20\x01(\x0cR\nupdateTime\x12)\n\x10update_signature\
    \x18\x08\x20\x01(\x0cR\x0fupdateSignature\"F\n\x15DatabaseMergeResponse\
    \x12-\n\x12database_signature\x18\x01\x20\x01(\x0cR\x11databaseSignature\
    B;\n#com.satoshilabs.trezor.lib.protobufB\x14TrezorMessageBinance\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(DatabaseWipe::generated_message_descriptor_data());
            messages.push(DatabaseWipeResponse::generated_message_descriptor_data());
            messages.push(DatabaseModifyKey::generated_message_descriptor_data());
            messages.push(DatabaseModifyKeyResponse::generated_message_descriptor_data());
            messages.push(DatabaseProveMembership::generated_message_descriptor_data());
            messages.push(DatabaseMerge::generated_message_descriptor_data());
            messages.push(DatabaseMergeResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
